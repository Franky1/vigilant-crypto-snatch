{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Vigiliant Crypto Snatch is a little program that observes the current market price for your choice of currency pairs, looks for drastic reductions (dips) and then places buy orders. The basic idea is to use the Dollar Cost Average effect in a bit more clever way. By buying in fixed time intervals for a certain amount of fiat currency, one can profit from a sideways moving market with fluctuations. We can try to improve on this by also actively looking for reductions in the price to buy more cryptocurrency for the same fiat amount. The project is published on PyPI , so you can just install it with PIP. Most likely the easiest way to install is the following: sudo python3 -m pip install vigilant-crypto-snatch Then you need to configure it. Then see the instructions for running . If you want to upgrade use: sudo python3 -m pip install vigilant-crypto-snatch --upgrade We sometimes update the configuration options a bit and don't offer an automated migration path. You will likely get some errors on startup. Please consult the documentation to see how configuration works with the current version. In case you wonder about the name: Dips means that the price dives. Submarines dive. The HMS Vigilant is a submarine of the British Navy. But also vigilance means to observe.","title":"Welcome"},{"location":"#welcome","text":"Vigiliant Crypto Snatch is a little program that observes the current market price for your choice of currency pairs, looks for drastic reductions (dips) and then places buy orders. The basic idea is to use the Dollar Cost Average effect in a bit more clever way. By buying in fixed time intervals for a certain amount of fiat currency, one can profit from a sideways moving market with fluctuations. We can try to improve on this by also actively looking for reductions in the price to buy more cryptocurrency for the same fiat amount. The project is published on PyPI , so you can just install it with PIP. Most likely the easiest way to install is the following: sudo python3 -m pip install vigilant-crypto-snatch Then you need to configure it. Then see the instructions for running . If you want to upgrade use: sudo python3 -m pip install vigilant-crypto-snatch --upgrade We sometimes update the configuration options a bit and don't offer an automated migration path. You will likely get some errors on startup. Please consult the documentation to see how configuration works with the current version. In case you wonder about the name: Dips means that the price dives. Submarines dive. The HMS Vigilant is a submarine of the British Navy. But also vigilance means to observe.","title":"Welcome"},{"location":"configuration/","text":"Configuration Unfortunately we need to configure a few things before you can start automatic trading with this software. Most configuration is done in a YAML file at ~/.config/vigilant-crypto-snatch.yml . Create this file and open it in a text editor. We will talk you through the neccessary steps and show snippets to put into. Historic price API In order to find a drop in the price, we need to know the historic price at a given point. We use Crypto Compare for that as they provide a free API. Go to their website and create an API key. And retrieve your API key: In the configuration file then add the following: cryptocompare : api_key : 'your API key here' Marketplaces We currently support two marketplaces, Bitstamp and Kraken . You only have to configure one of them, but you can also configure both. When you start the program, you can just choose which marketplace you want to use today. Bitstamp In order to use Bitstamp, you need to set up an API key with them that has the correct permissions to trade with. Go to the settings menu and create a new key. Put this API key into the configuration file. bitstamp : username : 'username here' key : 'key here' secret : 'secret here' Kraken The Kraken API has it's own configuration files. First you have to create a file at ~/.config/clikraken/settings.ini and insert the following there: [clikraken] trading_agreement = agree Then on the website create an API key which has the permission to trade. You will have an API key and an associated secret. In the file ~/.config/clikraken/settings.ini you have two lines, the first will be API key and the second will be the secret, like this: APIKEY secret There is nothing to add to our main configuration file. Triggers You can define as many triggers as you would like. First you should set the polling interval that the main loop should use. It will wait this many seconds before checking again. For testing we found that 5 seconds is a good value, for production use 60 seconds should be absolutely sufficient. sleep : 60 We have two types of triggers: Drop triggers and just timers. All timers have a cooldown such that they are not executed again and again. The cooldown is the same as the checking interval. Drop triggers The drop trigger will fire when the price has dropped by a certain percentage compared to a reference at an earlier time. You can choose the delay and the drop percentage as you like. It might make sense to have larger drops when the time period is longer. Say we want to have three triggers, two for Bitcoin and one for Etherum. When it drops by 5 % within 60 minutes, we want to buy for 25 EUR. If it drops by 15 % within 24 hours, we want to buy for 100 EUR. And for Etherum I just want the first trigger. In the configuration it would look like this: triggers : - { coin : btc , fiat : eur , minutes : 60 , drop : 5 , volume_fiat : 25.00 } - { coin : btc , fiat : eur , minutes : 1400 , drop : 15 , volume_fiat : 100.00 } - { coin : eth , fiat : eur , minutes : 60 , drop : 4.5 , volume_fiat : 25.00 } You can specify a decimal number for the drop percentage, just be aware that it must contain a decimal point instead of a decimal comma. Timers If the market is steadily rising, there won't be drops. We still want to make use of the dollar cost average effect. For this we want to have a simple timer that doesn't have any other dependencies. If we want to buy Bitcoin for 75 EUR every 14 days, we can use this: timers : - { coin : btc , fiat : eur , minutes : 20160 , volume_fiat : 75.00 } Telegram notifications Optionally you can set up notifications via Telegram. This is not required, but a nice extra to allow monitoring from anywhere. First you have to create a bot by talking to @botfather . It will lead you through a couple of steps: Type /start to initiate the bot creation. Then type /newbot to create your bot. It will ask you for the name of the bot. You can just use \u201cvigilant-crypto-snatch\u201d or something else. Next it will ask for a username of the bot. This is a technical thing, so it doesn't need to be pretty. It needs to be unique and end with bot . So perhaps use something like vigilant_0f8704a83991_bot , where you just make up your own random letters. It will give you an access token that you can use for the API. Enter that token into the configuration file: telegram : token : 'Your bot token here' level : info You will need to write a message to the bot in order to open a direct conversation with it. This is necessary such that the bot can reply to you. The level specified the messages that you want to receive. info gives sensible information, if you only want to receive information when something goes wrong, use warning . See the section in running for more details.","title":"Configuration"},{"location":"configuration/#configuration","text":"Unfortunately we need to configure a few things before you can start automatic trading with this software. Most configuration is done in a YAML file at ~/.config/vigilant-crypto-snatch.yml . Create this file and open it in a text editor. We will talk you through the neccessary steps and show snippets to put into.","title":"Configuration"},{"location":"configuration/#historic-price-api","text":"In order to find a drop in the price, we need to know the historic price at a given point. We use Crypto Compare for that as they provide a free API. Go to their website and create an API key. And retrieve your API key: In the configuration file then add the following: cryptocompare : api_key : 'your API key here'","title":"Historic price API"},{"location":"configuration/#marketplaces","text":"We currently support two marketplaces, Bitstamp and Kraken . You only have to configure one of them, but you can also configure both. When you start the program, you can just choose which marketplace you want to use today.","title":"Marketplaces"},{"location":"configuration/#bitstamp","text":"In order to use Bitstamp, you need to set up an API key with them that has the correct permissions to trade with. Go to the settings menu and create a new key. Put this API key into the configuration file. bitstamp : username : 'username here' key : 'key here' secret : 'secret here'","title":"Bitstamp"},{"location":"configuration/#kraken","text":"The Kraken API has it's own configuration files. First you have to create a file at ~/.config/clikraken/settings.ini and insert the following there: [clikraken] trading_agreement = agree Then on the website create an API key which has the permission to trade. You will have an API key and an associated secret. In the file ~/.config/clikraken/settings.ini you have two lines, the first will be API key and the second will be the secret, like this: APIKEY secret There is nothing to add to our main configuration file.","title":"Kraken"},{"location":"configuration/#triggers","text":"You can define as many triggers as you would like. First you should set the polling interval that the main loop should use. It will wait this many seconds before checking again. For testing we found that 5 seconds is a good value, for production use 60 seconds should be absolutely sufficient. sleep : 60 We have two types of triggers: Drop triggers and just timers. All timers have a cooldown such that they are not executed again and again. The cooldown is the same as the checking interval.","title":"Triggers"},{"location":"configuration/#drop-triggers","text":"The drop trigger will fire when the price has dropped by a certain percentage compared to a reference at an earlier time. You can choose the delay and the drop percentage as you like. It might make sense to have larger drops when the time period is longer. Say we want to have three triggers, two for Bitcoin and one for Etherum. When it drops by 5 % within 60 minutes, we want to buy for 25 EUR. If it drops by 15 % within 24 hours, we want to buy for 100 EUR. And for Etherum I just want the first trigger. In the configuration it would look like this: triggers : - { coin : btc , fiat : eur , minutes : 60 , drop : 5 , volume_fiat : 25.00 } - { coin : btc , fiat : eur , minutes : 1400 , drop : 15 , volume_fiat : 100.00 } - { coin : eth , fiat : eur , minutes : 60 , drop : 4.5 , volume_fiat : 25.00 } You can specify a decimal number for the drop percentage, just be aware that it must contain a decimal point instead of a decimal comma.","title":"Drop triggers"},{"location":"configuration/#timers","text":"If the market is steadily rising, there won't be drops. We still want to make use of the dollar cost average effect. For this we want to have a simple timer that doesn't have any other dependencies. If we want to buy Bitcoin for 75 EUR every 14 days, we can use this: timers : - { coin : btc , fiat : eur , minutes : 20160 , volume_fiat : 75.00 }","title":"Timers"},{"location":"configuration/#telegram-notifications","text":"Optionally you can set up notifications via Telegram. This is not required, but a nice extra to allow monitoring from anywhere. First you have to create a bot by talking to @botfather . It will lead you through a couple of steps: Type /start to initiate the bot creation. Then type /newbot to create your bot. It will ask you for the name of the bot. You can just use \u201cvigilant-crypto-snatch\u201d or something else. Next it will ask for a username of the bot. This is a technical thing, so it doesn't need to be pretty. It needs to be unique and end with bot . So perhaps use something like vigilant_0f8704a83991_bot , where you just make up your own random letters. It will give you an access token that you can use for the API. Enter that token into the configuration file: telegram : token : 'Your bot token here' level : info You will need to write a message to the bot in order to open a direct conversation with it. This is necessary such that the bot can reply to you. The level specified the messages that you want to receive. info gives sensible information, if you only want to receive information when something goes wrong, use warning . See the section in running for more details.","title":"Telegram notifications"},{"location":"developing/","text":"Developing This project is written in Python. It uses Poetry to manage the project and its dependencies. Once you have obtained the source code via git clone , you can install the project into a virtual environment using poetry install . This will install all the dependencies and the package. You can of course use any Python development environment that you want. Martin can recommend PyCharm Community Edition . Make sure to install the \u201cPoetry\u201d plugin to easily set up the virtual environment. In order to run in development mode, use Poetry: poetry run vigilant-crypto-snatch [ more command line arguments ] Updating the documentation The documentation is created with Material for MkDocs . Just edit the Markdown files in docs . To locally view the documentation, use this: poetry run mkdocs serve To publish a new version to GitHub Pages, use this: poetry run mkdocs gh-publish","title":"Developing"},{"location":"developing/#developing","text":"This project is written in Python. It uses Poetry to manage the project and its dependencies. Once you have obtained the source code via git clone , you can install the project into a virtual environment using poetry install . This will install all the dependencies and the package. You can of course use any Python development environment that you want. Martin can recommend PyCharm Community Edition . Make sure to install the \u201cPoetry\u201d plugin to easily set up the virtual environment. In order to run in development mode, use Poetry: poetry run vigilant-crypto-snatch [ more command line arguments ]","title":"Developing"},{"location":"developing/#updating-the-documentation","text":"The documentation is created with Material for MkDocs . Just edit the Markdown files in docs . To locally view the documentation, use this: poetry run mkdocs serve To publish a new version to GitHub Pages, use this: poetry run mkdocs gh-publish","title":"Updating the documentation"},{"location":"license/","text":"License This project is licensed under the MIT license . Copyright 2019, 2021 Dr. Martin Ueding, Christoph Hansen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"This project is licensed under the MIT license . Copyright 2019, 2021 Dr. Martin Ueding, Christoph Hansen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"running/","text":"Running If you have installed it system-wide, you can just execute vigilant-crypto-snatch [options] to run it. You can pass additional options, if you want. With the --help option you will see an up-to-date list of options. You can choose the marketplace that you want to use with the --marketplace bitstamp or --marketplace kraken . When you want to quit, just press Ctrl + C . All historical price data and performed transactions will be stored in a SQLite database at ~/.local/share/vigilant-crypto-snatch/db.sqlite . We sometimes change the database format between major releases. In that case it is easiest to delete the database and let the script create the new one. As there are only so few users, we don't offer proper database migrations. Notifications The program can emit a lot of status output while running. You can specify a log level with --loglevel LEVEL , where LEVEL can be critical , error , warning , info or debug . The info level is the default and does not fill the terminal with tons of output. You can set it to debug if you want to have more output and want to diagnose your triggers. Telegram If the Telegram bot token is set up correctly, you will receive messages like this: The severity of messages is color-coded with an emoji according to this mapping: Symbol Severity \ud83d\udd34 Critical \ud83d\udfe0 Error \ud83d\udfe1 Warning \ud83d\udfe2 Info \ud83d\udd35 Debug The logging level is set to Info by default. You must not set it to Debug as sending a Telegram message will produce more debug messages. The program will crash with an infinite recursion. Keepalive mode We have tried to handle various error conditions that can happen. For instance the API of the marketplace could reject the query. During development we have tried to trigger various errors and handle them. From production runs we know that sometimes there API outages, internet connection glitches and the like. In these cases exception types that we haven't handled yet are raised. These crash normally crash the program, and we would like to ask you to file a bug report then. In order to have it stay running in production you can use the --keepalive flag. It will just catch all exception types. This may hide some actual errors. So please still report these errors as tickets. Nonce rejections with Kraken If you happen to get nonce errors with the Kraken marketplace, consider using less triggers for it, or modifying your API key according to their guide","title":"Running"},{"location":"running/#running","text":"If you have installed it system-wide, you can just execute vigilant-crypto-snatch [options] to run it. You can pass additional options, if you want. With the --help option you will see an up-to-date list of options. You can choose the marketplace that you want to use with the --marketplace bitstamp or --marketplace kraken . When you want to quit, just press Ctrl + C . All historical price data and performed transactions will be stored in a SQLite database at ~/.local/share/vigilant-crypto-snatch/db.sqlite . We sometimes change the database format between major releases. In that case it is easiest to delete the database and let the script create the new one. As there are only so few users, we don't offer proper database migrations.","title":"Running"},{"location":"running/#notifications","text":"The program can emit a lot of status output while running. You can specify a log level with --loglevel LEVEL , where LEVEL can be critical , error , warning , info or debug . The info level is the default and does not fill the terminal with tons of output. You can set it to debug if you want to have more output and want to diagnose your triggers.","title":"Notifications"},{"location":"running/#telegram","text":"If the Telegram bot token is set up correctly, you will receive messages like this: The severity of messages is color-coded with an emoji according to this mapping: Symbol Severity \ud83d\udd34 Critical \ud83d\udfe0 Error \ud83d\udfe1 Warning \ud83d\udfe2 Info \ud83d\udd35 Debug The logging level is set to Info by default. You must not set it to Debug as sending a Telegram message will produce more debug messages. The program will crash with an infinite recursion.","title":"Telegram"},{"location":"running/#keepalive-mode","text":"We have tried to handle various error conditions that can happen. For instance the API of the marketplace could reject the query. During development we have tried to trigger various errors and handle them. From production runs we know that sometimes there API outages, internet connection glitches and the like. In these cases exception types that we haven't handled yet are raised. These crash normally crash the program, and we would like to ask you to file a bug report then. In order to have it stay running in production you can use the --keepalive flag. It will just catch all exception types. This may hide some actual errors. So please still report these errors as tickets.","title":"Keepalive mode"},{"location":"running/#nonce-rejections-with-kraken","text":"If you happen to get nonce errors with the Kraken marketplace, consider using less triggers for it, or modifying your API key according to their guide","title":"Nonce rejections with Kraken"}]}