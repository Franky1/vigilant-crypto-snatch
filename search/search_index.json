{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Vigiliant Crypto Snatch is a little program that observes the current market price for your choice of currency pairs, looks for drastic reductions (dips) and then places buy orders. The basic idea is to use the Dollar Cost Average effect in a bit more clever way. By buying in fixed time intervals for a certain amount of fiat currency, one can profit from a sideways moving market with fluctuations. We can try to improve on this by also actively looking for reductions in the price to buy more cryptocurrency for the same fiat amount. First you need to install the software, then configure it. Finally see the instructions for running . In case you wonder about the name: Dips means that the price dives. Submarines dive. The HMS Vigilant is a submarine of the British Navy. But also vigilance means to observe.","title":"Welcome"},{"location":"#welcome","text":"Vigiliant Crypto Snatch is a little program that observes the current market price for your choice of currency pairs, looks for drastic reductions (dips) and then places buy orders. The basic idea is to use the Dollar Cost Average effect in a bit more clever way. By buying in fixed time intervals for a certain amount of fiat currency, one can profit from a sideways moving market with fluctuations. We can try to improve on this by also actively looking for reductions in the price to buy more cryptocurrency for the same fiat amount. First you need to install the software, then configure it. Finally see the instructions for running . In case you wonder about the name: Dips means that the price dives. Submarines dive. The HMS Vigilant is a submarine of the British Navy. But also vigilance means to observe.","title":"Welcome"},{"location":"configuration/","text":"Configuration Unfortunately we need to configure a few things before you can start automatic trading with this software. Most configuration is done in a YAML file at ~/.config/vigilant-crypto-snatch.yml . Create this file and open it in a text editor. We will talk you through the neccessary steps and show snippets to put into. Historic price API In order to find a drop in the price, we need to know the historic price at a given point. We use Crypto Compare for that as they provide a free API. Go to their website and create an API key. And retrieve your API key: In the configuration file then add the following: cryptocompare : api_key : 'your API key here' Marketplaces We currently support two marketplaces, Bitstamp and Kraken . You only have to configure one of them, but you can also configure both. When you start the program, you can just choose which marketplace you want to use today. Bitstamp In order to use Bitstamp, you need to set up an API key with them that has the correct permissions to trade with. Go to the settings menu and create a new key. Put this API key into the configuration file. bitstamp : username : 'username here' key : 'key here' secret : 'secret here' Kraken The Kraken Python library that we use has it's own configuration files. First you have to create a file at ~/.config/clikraken/settings.ini and insert the following there: [clikraken] trading_agreement = agree Then on the website create an API key which has the permission to trade. Navigate to the API settings: There you need to create a new API key: Be sure to select the Create & Modify Orders permission such that the program can actually execute orders. Give the least amount of permissions, you certainly don't want Withdraw Funds . You will get an API key and an associated secret. In the file ~/.config/clikraken/kraken.key you must have two lines, the first will be API key and the second will be the secret, like this: APIKEY secret There is nothing to add to our main configuration file. Triggers You can define as many triggers as you would like. First you should set the polling interval that the main loop should use. It will wait this many seconds before checking again. For testing we found that 5 seconds is a good value, for production use 60 seconds should be absolutely sufficient. sleep : 60 We have two types of triggers: Drop triggers and just timers. All timers have a cooldown such that they are not executed again and again. The cooldown is the same as the checking interval. Drop triggers The drop trigger will fire when the price has dropped by a certain percentage compared to a reference at an earlier time. You can choose the delay and the drop percentage as you like. It might make sense to have larger drops when the time period is longer. Say we want to have three triggers, two for Bitcoin and one for Etherum. When it drops by 5 % within 60 minutes, we want to buy for 25 EUR. If it drops by 15 % within 24 hours, we want to buy for 100 EUR. And for Etherum I just want the first trigger. This is an off-the-cuff example, think about the triggers that you want to have yourself. In the configuration it would look like this: triggers : - { coin : btc , fiat : eur , minutes : 60 , drop : 5 , volume_fiat : 25.00 } - { coin : btc , fiat : eur , minutes : 1400 , drop : 15 , volume_fiat : 100.00 } - { coin : eth , fiat : eur , minutes : 60 , drop : 4.5 , volume_fiat : 25.00 } You can specify a decimal number for the drop percentage, just be aware that it must contain a decimal point instead of a decimal comma. Timers If the market is steadily rising, there won't be drops. We still want to make use of the dollar cost average effect. For this we want to have a simple timer that doesn't have any other dependencies. If we want to buy Bitcoin for 75 EUR every 14 days, we can use this: timers : - { coin : btc , fiat : eur , minutes : 20160 , volume_fiat : 75.00 } Telegram notifications Optionally you can set up notifications via Telegram. This is not required, but a nice extra to allow monitoring from anywhere. First you have to create a bot by talking to @botfather . It will lead you through a couple of steps: Type /start to initiate the bot creation. Then type /newbot to create your bot. It will ask you for the name of the bot. You can just use \u201cvigilant-crypto-snatch\u201d or something else. Next it will ask for a username of the bot. This is a technical thing, so it doesn't need to be pretty. It needs to be unique and end with bot . So perhaps use something like vigilant_0f8704a83991_bot , where you just make up your own random letters. It will give you an access token that you can use for the API. Enter that token into the configuration file: telegram : token : 'Your bot token here' level : info You will need to write a message to the bot in order to open a direct conversation with it. This is necessary such that the bot can reply to you. The level specified the messages that you want to receive. info gives sensible information, if you only want to receive information when something goes wrong, use warning . See the section in running for more details. If the Telegram bot token is set up correctly, you will receive messages like this: The severity of messages is color-coded with an emoji according to this mapping: Symbol Severity \ud83d\udd34 Critical \ud83d\udfe0 Error \ud83d\udfe1 Warning \ud83d\udfe2 Info \ud83d\udd35 Debug The logging level is set to Info by default. You must not set it to Debug as sending a Telegram message will produce more debug messages. The program will crash with an infinite recursion.","title":"Configuration"},{"location":"configuration/#configuration","text":"Unfortunately we need to configure a few things before you can start automatic trading with this software. Most configuration is done in a YAML file at ~/.config/vigilant-crypto-snatch.yml . Create this file and open it in a text editor. We will talk you through the neccessary steps and show snippets to put into.","title":"Configuration"},{"location":"configuration/#historic-price-api","text":"In order to find a drop in the price, we need to know the historic price at a given point. We use Crypto Compare for that as they provide a free API. Go to their website and create an API key. And retrieve your API key: In the configuration file then add the following: cryptocompare : api_key : 'your API key here'","title":"Historic price API"},{"location":"configuration/#marketplaces","text":"We currently support two marketplaces, Bitstamp and Kraken . You only have to configure one of them, but you can also configure both. When you start the program, you can just choose which marketplace you want to use today.","title":"Marketplaces"},{"location":"configuration/#bitstamp","text":"In order to use Bitstamp, you need to set up an API key with them that has the correct permissions to trade with. Go to the settings menu and create a new key. Put this API key into the configuration file. bitstamp : username : 'username here' key : 'key here' secret : 'secret here'","title":"Bitstamp"},{"location":"configuration/#kraken","text":"The Kraken Python library that we use has it's own configuration files. First you have to create a file at ~/.config/clikraken/settings.ini and insert the following there: [clikraken] trading_agreement = agree Then on the website create an API key which has the permission to trade. Navigate to the API settings: There you need to create a new API key: Be sure to select the Create & Modify Orders permission such that the program can actually execute orders. Give the least amount of permissions, you certainly don't want Withdraw Funds . You will get an API key and an associated secret. In the file ~/.config/clikraken/kraken.key you must have two lines, the first will be API key and the second will be the secret, like this: APIKEY secret There is nothing to add to our main configuration file.","title":"Kraken"},{"location":"configuration/#triggers","text":"You can define as many triggers as you would like. First you should set the polling interval that the main loop should use. It will wait this many seconds before checking again. For testing we found that 5 seconds is a good value, for production use 60 seconds should be absolutely sufficient. sleep : 60 We have two types of triggers: Drop triggers and just timers. All timers have a cooldown such that they are not executed again and again. The cooldown is the same as the checking interval.","title":"Triggers"},{"location":"configuration/#drop-triggers","text":"The drop trigger will fire when the price has dropped by a certain percentage compared to a reference at an earlier time. You can choose the delay and the drop percentage as you like. It might make sense to have larger drops when the time period is longer. Say we want to have three triggers, two for Bitcoin and one for Etherum. When it drops by 5 % within 60 minutes, we want to buy for 25 EUR. If it drops by 15 % within 24 hours, we want to buy for 100 EUR. And for Etherum I just want the first trigger. This is an off-the-cuff example, think about the triggers that you want to have yourself. In the configuration it would look like this: triggers : - { coin : btc , fiat : eur , minutes : 60 , drop : 5 , volume_fiat : 25.00 } - { coin : btc , fiat : eur , minutes : 1400 , drop : 15 , volume_fiat : 100.00 } - { coin : eth , fiat : eur , minutes : 60 , drop : 4.5 , volume_fiat : 25.00 } You can specify a decimal number for the drop percentage, just be aware that it must contain a decimal point instead of a decimal comma.","title":"Drop triggers"},{"location":"configuration/#timers","text":"If the market is steadily rising, there won't be drops. We still want to make use of the dollar cost average effect. For this we want to have a simple timer that doesn't have any other dependencies. If we want to buy Bitcoin for 75 EUR every 14 days, we can use this: timers : - { coin : btc , fiat : eur , minutes : 20160 , volume_fiat : 75.00 }","title":"Timers"},{"location":"configuration/#telegram-notifications","text":"Optionally you can set up notifications via Telegram. This is not required, but a nice extra to allow monitoring from anywhere. First you have to create a bot by talking to @botfather . It will lead you through a couple of steps: Type /start to initiate the bot creation. Then type /newbot to create your bot. It will ask you for the name of the bot. You can just use \u201cvigilant-crypto-snatch\u201d or something else. Next it will ask for a username of the bot. This is a technical thing, so it doesn't need to be pretty. It needs to be unique and end with bot . So perhaps use something like vigilant_0f8704a83991_bot , where you just make up your own random letters. It will give you an access token that you can use for the API. Enter that token into the configuration file: telegram : token : 'Your bot token here' level : info You will need to write a message to the bot in order to open a direct conversation with it. This is necessary such that the bot can reply to you. The level specified the messages that you want to receive. info gives sensible information, if you only want to receive information when something goes wrong, use warning . See the section in running for more details. If the Telegram bot token is set up correctly, you will receive messages like this: The severity of messages is color-coded with an emoji according to this mapping: Symbol Severity \ud83d\udd34 Critical \ud83d\udfe0 Error \ud83d\udfe1 Warning \ud83d\udfe2 Info \ud83d\udd35 Debug The logging level is set to Info by default. You must not set it to Debug as sending a Telegram message will produce more debug messages. The program will crash with an infinite recursion.","title":"Telegram notifications"},{"location":"developing/","text":"Developing This project is written in Python. It uses Poetry to manage the project and its dependencies. Once you have obtained the source code via git clone , you can install the project into a virtual environment using poetry install . This will install all the dependencies and the package. You can of course use any Python development environment that you want. Martin can recommend PyCharm Community Edition . Make sure to install the \u201cPoetry\u201d plugin to easily set up the virtual environment. In order to run in development mode, use Poetry: poetry run vigilant-crypto-snatch [ more command line arguments ] Updating the documentation The documentation is created with Material for MkDocs . Just edit the Markdown files in docs . To locally view the documentation, use this: poetry run mkdocs serve To publish a new version to GitHub Pages, use this: poetry run mkdocs gh-publish Code style We try to develop this in a Clean Code way, with the least amount of coupling. We also follow the Hypermodern Python series for project layout and choice of tooling. Code formatting is done with Black : poetry run black src/**.py test/**.py","title":"Developing"},{"location":"developing/#developing","text":"This project is written in Python. It uses Poetry to manage the project and its dependencies. Once you have obtained the source code via git clone , you can install the project into a virtual environment using poetry install . This will install all the dependencies and the package. You can of course use any Python development environment that you want. Martin can recommend PyCharm Community Edition . Make sure to install the \u201cPoetry\u201d plugin to easily set up the virtual environment. In order to run in development mode, use Poetry: poetry run vigilant-crypto-snatch [ more command line arguments ]","title":"Developing"},{"location":"developing/#updating-the-documentation","text":"The documentation is created with Material for MkDocs . Just edit the Markdown files in docs . To locally view the documentation, use this: poetry run mkdocs serve To publish a new version to GitHub Pages, use this: poetry run mkdocs gh-publish","title":"Updating the documentation"},{"location":"developing/#code-style","text":"We try to develop this in a Clean Code way, with the least amount of coupling. We also follow the Hypermodern Python series for project layout and choice of tooling. Code formatting is done with Black : poetry run black src/**.py test/**.py","title":"Code style"},{"location":"donation/","text":"Donation If this project has been useful for you and you would like to give a gift as a contribution, we would be very grateful to receive it. We have a couple of options for you. PayPal You can send money via to Chris via PayPal . Bitcoin There is also the possibility to send Bitcoin. Chris has set up a donation page , which currently is only available via the TOR browser as there is no DNS for the Lightning node which processes the payments. You can make an on-chain or Lightning donation. You will be rewarded with a nice GIF at the end!","title":"Donation"},{"location":"donation/#donation","text":"If this project has been useful for you and you would like to give a gift as a contribution, we would be very grateful to receive it. We have a couple of options for you.","title":"Donation"},{"location":"donation/#paypal","text":"You can send money via to Chris via PayPal .","title":"PayPal"},{"location":"donation/#bitcoin","text":"There is also the possibility to send Bitcoin. Chris has set up a donation page , which currently is only available via the TOR browser as there is no DNS for the Lightning node which processes the payments. You can make an on-chain or Lightning donation. You will be rewarded with a nice GIF at the end!","title":"Bitcoin"},{"location":"installation/","text":"Installation The project is published on PyPI , so you can just install it with PIP. We have split some functionality into an extra such that you can install just the base trading part on a little system that is running the whole time (like a Raspberry Pi). On your main workstation you can install the full software such that you can use the evaluation interface. To install just the base package system wide, run this: sudo python3 -m pip install vigilant-crypto-snatch The evaluation interface is included when you run this: sudo python3 -m pip install 'vigilant-crypto-snatch[evaluation]' If you don't want to install it system-wide, you can instead use python3 -p pip install --user vigilant . In that case you have to make sure that ~/.local/bin is part of your PATH environment variable. Once you are done with the installation, go over to the configuration . Upgrades If you want to upgrade use: sudo python3 -m pip install vigilant-crypto-snatch --upgrade In case you have installed it differently, you will likely also need to upgrade in the same way. We sometimes update the configuration options a bit and don't offer an automated migration path. You will likely get some errors on startup. Please consult the documentation to see how configuration works with the current version.","title":"Installation"},{"location":"installation/#installation","text":"The project is published on PyPI , so you can just install it with PIP. We have split some functionality into an extra such that you can install just the base trading part on a little system that is running the whole time (like a Raspberry Pi). On your main workstation you can install the full software such that you can use the evaluation interface. To install just the base package system wide, run this: sudo python3 -m pip install vigilant-crypto-snatch The evaluation interface is included when you run this: sudo python3 -m pip install 'vigilant-crypto-snatch[evaluation]' If you don't want to install it system-wide, you can instead use python3 -p pip install --user vigilant . In that case you have to make sure that ~/.local/bin is part of your PATH environment variable. Once you are done with the installation, go over to the configuration .","title":"Installation"},{"location":"installation/#upgrades","text":"If you want to upgrade use: sudo python3 -m pip install vigilant-crypto-snatch --upgrade In case you have installed it differently, you will likely also need to upgrade in the same way. We sometimes update the configuration options a bit and don't offer an automated migration path. You will likely get some errors on startup. Please consult the documentation to see how configuration works with the current version.","title":"Upgrades"},{"location":"license/","text":"License This project is licensed under the MIT license . Copyright 2019, 2021 Dr. Martin Ueding, Christoph Hansen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"This project is licensed under the MIT license . Copyright 2019, 2021 Dr. Martin Ueding, Christoph Hansen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"running/","text":"Usage The program has a hierarchical command line interface with multiple subcommands. If you have installed it system-wide, you can just directly call it. Otherwise you might have to add ~/.local/bin to your PATH variable. With the --help option you will see an up-to-date list of options. The general structure of a call is this: vigilant-crypto-snatch [general options] subcommand [subcommand options] The general options are the following: --loglevel : The program can emit a lot of status output while running. You can specify a log level with --loglevel LEVEL , where LEVEL can be critical , error , warning , info or debug . The info level is the default and does not fill the terminal with tons of output. You can set it to debug if you want to have more output and want to diagnose your triggers. Subcommand watch The main command is watch . It will monitor the market and place buy orders. There are a couple of command line options: --marketplace MARKETPLACE : We support two marketplaces, you can select either bitstamp or kraken . --keepalive : The program handles various error cases. Sometimes there are exceptions that we haven't encountered yet. When you use the watch subcommand in production, you can specify this option. It will catch any exception and just report it. Please open a ticket when you encounter a new exception type. When you want to quit, just press Ctrl + C . All historical price data and performed transactions will be stored in a SQLite database at ~/.local/share/vigilant-crypto-snatch/db.sqlite . We sometimes change the database format between major releases. In that case it is easiest to delete the database and let the script create the new one. As there are only so few users, we don't offer proper database migrations. An example for running the script with log level info on Kraken: vigilant-crypto-snatch --loglevel info watch --marketplace kraken --keepalive Nonce rejections with Kraken If you happen to get nonce errors with the Kraken marketplace, consider using less triggers for it, or modifying your API key according to their guide Subcommand evaluate It is not inherently clear how triggers should be set. There are multiple variables that have to be tuned for each trigger: Time delay Cooloff (currently the same as time delay) Drop percentage Fiat volume We can try to verify a given strategy using historical data. We can also use the historical data to get an idea of a good strategy. Then we just simulate the given triggers and see how they perform. We provide a fun experimentation interface which is built with Streamlit and runs directly in your browser. This interface can be started using the evaluate subcommand without any additional parameters: vigilant-crypto-snatch evaluate You can then select a crypto and a fiat currency to use for the analysis. Then you can just switch between the various tools that are offered. These are described below. Possible errors It might be possible that you cannot start the Streamlit interface. The most basic error could be an ImportError saying that the package altair or streamlit could not be imported. In that case you haven't installed the evaluation extra. See the installation instructions on the front page. While starting it, you might get an error about too many files connected via inotify. In this case you need to create a file at .streamlit/config.toml and give it this content: [server] fileWatcherType = \"none\" Price tool Here you can just see the prices that we got from the historical API. This is nothing special, just a plot. These plots are slightly interactive, so you can make them fullscreen and they will render with higher quality. Trigger simulation tool You simulate triggers on historical data. Just select the type of trigger and tune the parameters to your liking. It will give you a summary which looks like this: 83 days simulated 18 trades 450.00 EUR invested 0.01189674 BTC acquired 552.74 EUR value 22.8 % gain in 83 days 147.0 % estimated yearly gain You will also get a plot which shows the amount of money you have invested as well as the value of the crypto assets aquired. With this you can get a sense on the gains. You also have a table with the trades that were performed. In case the trigger has not been executed once, you will of course get a message. Drop survey tool Fiddling with individual triggers can be informative, but a more meta view could be very helpful. For this all sorts of drop triggers are performed, with a grid of various delays and various drop percentages. You can control the ranges of both with two-way sliders. Each time such a trigger is executed a fixed unit of fiat currency is invested. At the end of the time period the amount of crypto currency is normalized by the amount of fiat currency spent. This will show the most efficient triggers. It doesn't show how often these triggers have been used, or how much crypto currency you will have in the end. In the resulting heat map you can see colored areas where the most gains are in a dark red. In regions where the trigger has never been executed, you will just see black. These regions indicate that there was no such drop in the period looked at. Likely there will be one really dark area. This is an artefact from a single large drop in the past three months. Of course this is the best drop trigger for that particluar period, but it does not really generalize. So be wary that different historical periods look differently. Use this plot to get a general sense of fluctuations in the market and which triggers would fire often and form a good base strategy. In the above image, having a trigger at around 10 % and 24 hours delay seems to be a reasonable choice. You might still want to include some really ambitious triggers such that you can realize large gains. For instance having one for 25 % within 48 hours could be a good idea.","title":"Usage"},{"location":"running/#usage","text":"The program has a hierarchical command line interface with multiple subcommands. If you have installed it system-wide, you can just directly call it. Otherwise you might have to add ~/.local/bin to your PATH variable. With the --help option you will see an up-to-date list of options. The general structure of a call is this: vigilant-crypto-snatch [general options] subcommand [subcommand options] The general options are the following: --loglevel : The program can emit a lot of status output while running. You can specify a log level with --loglevel LEVEL , where LEVEL can be critical , error , warning , info or debug . The info level is the default and does not fill the terminal with tons of output. You can set it to debug if you want to have more output and want to diagnose your triggers.","title":"Usage"},{"location":"running/#subcommand-watch","text":"The main command is watch . It will monitor the market and place buy orders. There are a couple of command line options: --marketplace MARKETPLACE : We support two marketplaces, you can select either bitstamp or kraken . --keepalive : The program handles various error cases. Sometimes there are exceptions that we haven't encountered yet. When you use the watch subcommand in production, you can specify this option. It will catch any exception and just report it. Please open a ticket when you encounter a new exception type. When you want to quit, just press Ctrl + C . All historical price data and performed transactions will be stored in a SQLite database at ~/.local/share/vigilant-crypto-snatch/db.sqlite . We sometimes change the database format between major releases. In that case it is easiest to delete the database and let the script create the new one. As there are only so few users, we don't offer proper database migrations. An example for running the script with log level info on Kraken: vigilant-crypto-snatch --loglevel info watch --marketplace kraken --keepalive","title":"Subcommand watch"},{"location":"running/#nonce-rejections-with-kraken","text":"If you happen to get nonce errors with the Kraken marketplace, consider using less triggers for it, or modifying your API key according to their guide","title":"Nonce rejections with Kraken"},{"location":"running/#subcommand-evaluate","text":"It is not inherently clear how triggers should be set. There are multiple variables that have to be tuned for each trigger: Time delay Cooloff (currently the same as time delay) Drop percentage Fiat volume We can try to verify a given strategy using historical data. We can also use the historical data to get an idea of a good strategy. Then we just simulate the given triggers and see how they perform. We provide a fun experimentation interface which is built with Streamlit and runs directly in your browser. This interface can be started using the evaluate subcommand without any additional parameters: vigilant-crypto-snatch evaluate You can then select a crypto and a fiat currency to use for the analysis. Then you can just switch between the various tools that are offered. These are described below.","title":"Subcommand evaluate"},{"location":"running/#possible-errors","text":"It might be possible that you cannot start the Streamlit interface. The most basic error could be an ImportError saying that the package altair or streamlit could not be imported. In that case you haven't installed the evaluation extra. See the installation instructions on the front page. While starting it, you might get an error about too many files connected via inotify. In this case you need to create a file at .streamlit/config.toml and give it this content: [server] fileWatcherType = \"none\"","title":"Possible errors"},{"location":"running/#price-tool","text":"Here you can just see the prices that we got from the historical API. This is nothing special, just a plot. These plots are slightly interactive, so you can make them fullscreen and they will render with higher quality.","title":"Price tool"},{"location":"running/#trigger-simulation-tool","text":"You simulate triggers on historical data. Just select the type of trigger and tune the parameters to your liking. It will give you a summary which looks like this: 83 days simulated 18 trades 450.00 EUR invested 0.01189674 BTC acquired 552.74 EUR value 22.8 % gain in 83 days 147.0 % estimated yearly gain You will also get a plot which shows the amount of money you have invested as well as the value of the crypto assets aquired. With this you can get a sense on the gains. You also have a table with the trades that were performed. In case the trigger has not been executed once, you will of course get a message.","title":"Trigger simulation tool"},{"location":"running/#drop-survey-tool","text":"Fiddling with individual triggers can be informative, but a more meta view could be very helpful. For this all sorts of drop triggers are performed, with a grid of various delays and various drop percentages. You can control the ranges of both with two-way sliders. Each time such a trigger is executed a fixed unit of fiat currency is invested. At the end of the time period the amount of crypto currency is normalized by the amount of fiat currency spent. This will show the most efficient triggers. It doesn't show how often these triggers have been used, or how much crypto currency you will have in the end. In the resulting heat map you can see colored areas where the most gains are in a dark red. In regions where the trigger has never been executed, you will just see black. These regions indicate that there was no such drop in the period looked at. Likely there will be one really dark area. This is an artefact from a single large drop in the past three months. Of course this is the best drop trigger for that particluar period, but it does not really generalize. So be wary that different historical periods look differently. Use this plot to get a general sense of fluctuations in the market and which triggers would fire often and form a good base strategy. In the above image, having a trigger at around 10 % and 24 hours delay seems to be a reasonable choice. You might still want to include some really ambitious triggers such that you can realize large gains. For instance having one for 25 % within 48 hours could be a good idea.","title":"Drop survey tool"},{"location":"support/","text":"Support The documentation hopefully answers most common question. In case you find it lacking, have a problem or want to suggest a feature, you have a couple of options. Issue tracker For all sorts of issues and feature requests it is easiest if you just open a new ticket in the issue tracker on GitHub . This way they are structured and I can directly reply to you. Telegram group We also have a Telegram group where developers and users hang out, discuss the application, bugs and features.","title":"Support"},{"location":"support/#support","text":"The documentation hopefully answers most common question. In case you find it lacking, have a problem or want to suggest a feature, you have a couple of options.","title":"Support"},{"location":"support/#issue-tracker","text":"For all sorts of issues and feature requests it is easiest if you just open a new ticket in the issue tracker on GitHub . This way they are structured and I can directly reply to you.","title":"Issue tracker"},{"location":"support/#telegram-group","text":"We also have a Telegram group where developers and users hang out, discuss the application, bugs and features.","title":"Telegram group"}]}