digraph {

rankdir = RL
overlap = false

node [style=filled, fillcolor=white, shape=box]

{
node [shape=component, style=filled, fillcolor=gray20, fontcolor=white]
"bitstamp"
"krakenex"
"sqlalchemy"
"Telegram"
"requests"
"appdirs"
"streamlit"
"pandas"
"yaml"
}

subgraph cluster_triggers {
label = "triggers"
fillcolor = gray90
style=filled
"TriggeredDelegate"
"VolumeFiatDelegate"
"Trigger" [shape=ellipse]
"FailureTimeout"
"BuyTrigger"
"DropTriggeredDelegate"
"TrueTriggeredDelegate"
"RatioVolumeFiatDelegate"
"FixedVolumeFiatDelegate"
"DatabaseCleaningTrigger"
"make_triggers()"
"make_buy_trigger()"
"make_triggers()" -> "make_buy_trigger()"
"CheckinTrigger"
"BuyTrigger" -> "Trigger" [arrowhead=onormal]
}


subgraph cluster_core {
label = "core"
fillcolor = gray90
style=filled
"Price" [shape=parallelogram]
"Trade" [shape=parallelogram]
}

subgraph cluster_datastore {
label = "datastore"
fillcolor = gray85
style=filled
"Datastore" [shape=ellipse]
"Datastore" -> "BuyTrigger"
}

subgraph cluster_datastore_sqlalchemy_store {
label = "datastore.sqlalchemy_store"
fillcolor = gray85
style=filled
"AlchemyPrice"
"AlchemyTrade"
"SqlAlchemyDatastore" -> "Datastore" [arrowhead=onormal]
"SqlAlchemyDatastore" -> "AlchemyPrice"
"SqlAlchemyDatastore" -> "AlchemyTrade"

"SqlAlchemyDatastore" -> "sqlalchemy"
"AlchemyPrice" -> "sqlalchemy"
"AlchemyTrade" -> "sqlalchemy"
}

{
node [shape=parallelogram]


}

{
node [shape=box]
"BitstampMarketplace"
"KrakenexMarketplace"
"TelegramBotException"
"TelegramSender"
"TriggerLoop"
"BuyError"
}

{
node [shape=ellipse]

"HistoricalSource"
"Marketplace"

}

{
node [shape=component]

"streamlit_ui"
"configuration"
"cli"
"migrations"

}



{
node [shape=note]

"watchloop.process_trigger()"
"watchloop.main()"
"marketplace.make_marketplace()"
"datamodel.garbage_collect_db()"

}

{
edge [arrowhead=vee]

"BitstampMarketplace" -> "bitstamp"
"CachingHistoricalSource" -> "sqlalchemy"
"DatabaseHistoricalSource" -> "sqlalchemy"
"KrakenexMarketplace" -> "krakenex"
"MarketSource" -> "Marketplace"
"TelegramSender" -> "Telegram"
"RatioVolumeFiatDelegate" -> "Marketplace"
"TriggerLoop" -> "Trigger"
"TriggerLoop" -> "TelegramSender"
"TriggerLoop" -> "BuyError"
"watchloop.process_trigger()" -> "TickerError"
"watchloop.process_trigger()" -> "BuyError"
"watchloop.process_trigger()" -> "requests"
"watchloop.process_trigger()" -> "Trigger"
"watchloop.process_trigger()" -> "sqlalchemy"
"watchloop.main()" -> "Marketplace"
"watchloop.main()" -> "CryptoCompareHistoricalSource"
"watchloop.main()" -> "MarketSource"
"watchloop.main()" -> "CachingHistoricalSource"
"watchloop.main()" -> "DatabaseHistoricalSource"
"watchloop.main()" -> "TriggerLoop"
"TelegramSender" -> "TelegramBotException"
"datamodel.garbage_collect_db()" -> "OldPrice"
"HistoricalSource" -> "OldPrice"
"Marketplace" -> "OldPrice"
"BuyTrigger" -> "OldTrade"
"BuyTrigger" -> "FailureTimeout"
"configuration" -> "appdirs"
"configuration" -> "yaml"
"watchloop.main()" -> "configuration"
"telegram.add_telegram_logger()" -> "configuration"
"marketplace.make_marketplace()" -> "BitstampMarketplace"
"marketplace.make_marketplace()" -> "KrakenexMarketplace"
"marketplace.make_marketplace()" -> "configuration"
"telegram.add_telegram_logger()" -> "TelegramLogger"
"telegram.add_telegram_logger()" -> "TelegramSender"
"streamlit_ui" -> "streamlit"
"streamlit_ui" -> "requests"
"streamlit_ui" -> "pandas"
"streamlit_ui" -> "BuyTrigger"
"make_buy_trigger()" -> "DropTriggeredDelegate"
"make_buy_trigger()" -> "TrueTriggeredDelegate"
"make_buy_trigger()" -> "FixedVolumeFiatDelegate"
"make_buy_trigger()" -> "RatioVolumeFiatDelegate"
"make_buy_trigger()" -> "BuyTrigger"
"BuyTrigger" -> "VolumeFiatDelegate"
"BuyTrigger" -> "TriggeredDelegate"
"BuyTrigger" -> "sqlalchemy"
"BuyTrigger" -> "HistoricalSource"
"BuyTrigger" -> "Marketplace"
"cli" -> "streamlit_ui"
"migrations" -> "configuration"
"watchloop.main()" -> "migrations"
"streamlit_ui" -> "InterpolatingSource"
"streamlit_ui" -> "SimulationMarketplace"
"Datastore" -> "Trade"
"Datastore" -> "Price"

}



{
edge [arrowhead=vee, style=dashed]

"CheckinTrigger" -> "datamodel.garbage_collect_db()"
"watchloop.main()" -> "marketplace.make_marketplace()"
"watchloop.main()" -> "make_triggers()"
"watchloop.main()" -> "telegram.add_telegram_logger()"
"streamlit_ui" -> "make_buy_trigger()"
"cli" -> "watchloop.main()"

}

{
edge [arrowhead=onormal]

"CachingHistoricalSource" -> "HistoricalSource"
"CryptoCompareHistoricalSource" -> "HistoricalSource"
"DatabaseHistoricalSource" -> "HistoricalSource"
"MarketSource" -> "HistoricalSource"
"BitstampMarketplace" -> "Marketplace"
"KrakenexMarketplace" -> "Marketplace"
"TelegramLogger" -> "logging.logger"
"DropTriggeredDelegate" -> "TriggeredDelegate"
"TrueTriggeredDelegate" -> "TriggeredDelegate"
"FixedVolumeFiatDelegate" -> "VolumeFiatDelegate"
"RatioVolumeFiatDelegate" -> "VolumeFiatDelegate"
"BuyTrigger" -> "Trigger"
"CheckinTrigger" -> "Trigger"
"DatabaseCleaningTrigger" -> "Trigger"
"InterpolatingSource" -> "HistoricalSource"
"SimulationMarketplace" -> "Marketplace"
"MockMarketplace" -> "Marketplace"
"MockHistorical" -> "HistoricalSource"

}

} 
