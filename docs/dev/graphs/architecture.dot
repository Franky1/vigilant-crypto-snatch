digraph {

rankdir = RL
overlap = false

node [style=filled, fillcolor=white, shape=box]

{
node [shape=component, style=filled, fillcolor=gray20, fontcolor=white]
"bitstamp"
"krakenex"
"sqlalchemy"
"Telegram"
"requests"
"appdirs"
"streamlit"
"pandas"
"yaml"
}

subgraph cluster_triggers {
label = "triggers"
fillcolor = gray90
style=filled
"TriggeredDelegate"
"VolumeFiatDelegate"
"Trigger" [shape=ellipse]
"FailureTimeout"
"BuyTrigger"
"DropTriggeredDelegate"
"TrueTriggeredDelegate"
"RatioVolumeFiatDelegate"
"FixedVolumeFiatDelegate"
"DatabaseCleaningTrigger"
"make_triggers()"
"make_buy_trigger()"
"CheckinTrigger"
}


subgraph cluster_core {
label = "core"
fillcolor = gray90
style=filled
"Price" [shape=parallelogram]
"Trade" [shape=parallelogram]
"TriggerSpec" [shape=parallelogram]
}

subgraph cluster_datastore {
label = "datastore"
fillcolor = gray85
style=filled
"Datastore" [shape=ellipse]
}

subgraph cluster_datastore_sqlalchemy_store {
label = "datastore.sqlalchemy_store"
fillcolor = gray85
style=filled
"AlchemyPrice"
"AlchemyTrade"
"SqlAlchemyDatastore"
}

subgraph cluster_datastore_list_store {
label = "datastore.list_store"
fillcolor = gray85
style=filled
"ListDatastore"
}

subgraph cluster_historical {
label = "historical"
fillcolor = gray90
style=filled
"HistoricalSource" [shape=ellipse]
"MockHistorical"
"MarketSource"
"CachingHistoricalSource"
"InterpolatingSource"
"CryptoCompareHistoricalSource"
"DatabaseHistoricalSource"
}

subgraph cluster_marketplace {
label = "marketplace"
fillcolor = gray90
style=filled
"Marketplace" [shape=ellipse]
"make_marketplace()" [shape=note]
"BitstampMarketplace"
"KrakenexMarketplace"
"BuyError"
"MockMarketplace"
"SimulationMarketplace"
"TickerError"
}

subgraph cluster_triggers {
label = "triggers"
fillcolor = gray90
style=filled
"Trigger" [shape=ellipse]
"RatioVolumeFiatDelegate"
"DropTriggeredDelegate"
"FixedVolumeFiatDelegate"
"VolumeFiatDelegate"
"TriggeredDelegate"
}

subgraph cluster_configuration {
label = "configuration"
fillcolor = gray90
style=filled
"parse_trigger_spec()" [shape=note]
"DropTriggeredDelegate"
"FixedVolumeFiatDelegate"
"VolumeFiatDelegate"
"TriggeredDelegate"
}


{
node [shape=box]
"TelegramBotException"
"TelegramSender"
"TriggerLoop"
}


{
node [shape=component, fillcolor=gray90, style=filled]
"streamlit_ui"
"configuration"
"cli"
"migrations"
}


{
node [shape=note]
"watchloop.process_trigger()"
"watchloop.main()"
}



"parse_trigger_spec()" -> "TriggerSpec"
"AlchemyPrice" -> "sqlalchemy"
"AlchemyTrade" -> "sqlalchemy"
"BitstampMarketplace" -> "bitstamp"
"BitstampMarketplace" -> "Marketplace" [arrowhead=onormal]
"BuyTrigger" -> "FailureTimeout"
"BuyTrigger" -> "HistoricalSource"
"BuyTrigger" -> "Marketplace"
"BuyTrigger" -> "sqlalchemy"
"BuyTrigger" -> "Trade"
"BuyTrigger" -> "Trigger" [arrowhead=onormal]
"BuyTrigger" -> "TriggeredDelegate"
"BuyTrigger" -> "VolumeFiatDelegate"
"CachingHistoricalSource" -> "HistoricalSource" [arrowhead=onormal]
"CheckinTrigger" -> "Datastore"
"CheckinTrigger" -> "Trigger" [arrowhead=onormal]
"cli" -> "streamlit_ui"
"cli" -> "watchloop.main()"
"configuration" -> "appdirs"
"configuration" -> "yaml"
"CryptoCompareHistoricalSource" -> "HistoricalSource" [arrowhead=onormal]
"DatabaseCleaningTrigger" -> "Trigger" [arrowhead=onormal]
"DatabaseHistoricalSource" -> "HistoricalSource" [arrowhead=onormal]
"Datastore" -> "Price"
"Datastore" -> "Trade"
"DropTriggeredDelegate" -> "TriggeredDelegate" [arrowhead=onormal]
"FixedVolumeFiatDelegate" -> "VolumeFiatDelegate" [arrowhead=onormal]
"HistoricalSource" -> "Price"
"InterpolatingSource" -> "HistoricalSource" [arrowhead=onormal]
"KrakenexMarketplace" -> "krakenex"
"KrakenexMarketplace" -> "Marketplace" [arrowhead=onormal]
"ListDatastore" -> "Datastore" [arrowhead=onormal]
"make_buy_trigger()" -> "BuyTrigger"
"make_buy_trigger()" -> "DropTriggeredDelegate"
"make_buy_trigger()" -> "FixedVolumeFiatDelegate"
"make_buy_trigger()" -> "RatioVolumeFiatDelegate"
"make_buy_trigger()" -> "TrueTriggeredDelegate"
"make_marketplace()" -> "BitstampMarketplace"
"make_marketplace()" -> "configuration"
"make_marketplace()" -> "KrakenexMarketplace"
"make_triggers()" -> "make_buy_trigger()"
"Marketplace" -> "Price"
"MarketSource" -> "HistoricalSource" [arrowhead=onormal]
"MarketSource" -> "Marketplace"
"migrations" -> "configuration"
"MockHistorical" -> "HistoricalSource" [arrowhead=onormal]
"MockMarketplace" -> "Marketplace" [arrowhead=onormal]
"RatioVolumeFiatDelegate" -> "Marketplace"
"RatioVolumeFiatDelegate" -> "VolumeFiatDelegate" [arrowhead=onormal]
"SimulationMarketplace" -> "Marketplace" [arrowhead=onormal]
"SqlAlchemyDatastore" -> "AlchemyPrice"
"SqlAlchemyDatastore" -> "AlchemyTrade"
"SqlAlchemyDatastore" -> "Datastore" [arrowhead=onormal]
"SqlAlchemyDatastore" -> "sqlalchemy"
"streamlit_ui" -> "BuyTrigger"
"streamlit_ui" -> "InterpolatingSource"
"streamlit_ui" -> "make_buy_trigger()"
"streamlit_ui" -> "pandas"
"streamlit_ui" -> "requests"
"streamlit_ui" -> "SimulationMarketplace"
"streamlit_ui" -> "streamlit"
"telegram.add_telegram_logger()" -> "configuration"
"telegram.add_telegram_logger()" -> "TelegramLogger"
"telegram.add_telegram_logger()" -> "TelegramSender"
"TelegramLogger" -> "logging.logger" [arrowhead=onormal]
"TelegramSender" -> "Telegram"
"TelegramSender" -> "TelegramBotException"
"TriggerLoop" -> "BuyError"
"TriggerLoop" -> "TelegramSender"
"TriggerLoop" -> "Trigger"
"TrueTriggeredDelegate" -> "TriggeredDelegate" [arrowhead=onormal]
"watchloop.main()" -> "CachingHistoricalSource"
"watchloop.main()" -> "configuration"
"watchloop.main()" -> "CryptoCompareHistoricalSource"
"watchloop.main()" -> "DatabaseHistoricalSource"
"watchloop.main()" -> "make_marketplace()"
"watchloop.main()" -> "make_triggers()"
"watchloop.main()" -> "Marketplace"
"watchloop.main()" -> "MarketSource"
"watchloop.main()" -> "migrations"
"watchloop.main()" -> "telegram.add_telegram_logger()"
"watchloop.main()" -> "TriggerLoop"
"watchloop.process_trigger()" -> "BuyError"
"watchloop.process_trigger()" -> "requests"
"watchloop.process_trigger()" -> "sqlalchemy"
"watchloop.process_trigger()" -> "TickerError"
"watchloop.process_trigger()" -> "Trigger"

} 
